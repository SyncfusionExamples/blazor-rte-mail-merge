@page "/"

@using Syncfusion.Blazor.RichTextEditor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@using System.Text.RegularExpressions;

            <SfRichTextEditor ID="_mailMergeEditor" @bind-Value="_rteValue" SaveInterval="1" @ref="_mailMergeEditor">
                <RichTextEditorToolbarSettings Items="@_tools">
                    <RichTextEditorEvents OnActionComplete="@OnActionCompleteHandler" />
                    <RichTextEditorCustomToolbarItems>
                        <RichTextEditorCustomToolbarItem Name="MergeData">
                            <Template>
                                <SfButton CssClass="@_buttonClass" OnClick="OnClickHandler" id="merge_data" tabindex="-1">
                                    <div class="e-tbar-btn-text">Merge Data</div>
                                </SfButton>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                        <RichTextEditorCustomToolbarItem Name="InsertField">
                            <Template>
                                <SfDropDownButton CssClass="@_buttonClass" id="insertField" Items="@_items" Content="Insert Field">
                                    <DropDownButtonEvents ItemSelected="OnItemSelect"></DropDownButtonEvents>
                                </SfDropDownButton>
                            </Template>
                        </RichTextEditorCustomToolbarItem>
                    </RichTextEditorCustomToolbarItems>
                </RichTextEditorToolbarSettings>
            </SfRichTextEditor>
            <SfMention DataSource="_mergeData" TItem="MergeData" Target="#_mailMergeEditor" MentionChar="_mentionChar" AllowSpaces="true" PopupWidth='250px' PopupHeight='200px' @ref="mentionObj">
                <DisplayTemplate>
                    <span>{{@((context as MergeData).Value)}}</span>
                </DisplayTemplate>
                <ChildContent>
                    <MentionFieldSettings Text="Text"></MentionFieldSettings>
                </ChildContent>
            </SfMention>
        

@code {
    private SfMention<MergeData> mentionObj;
    private SfRichTextEditor _mailMergeEditor;
    private string _buttonClass = "e-tbar-btn e-tbar-btn-text";
    private string _rteValue = @"<p>Dear <span contenteditable=""false"" class=""e-mention-chip""><span>{{FirstName}}</span></span> <span contenteditable=""false"" class=""e-mention-chip""><span>{{LastName}}</span></span>,</p>
    <p>We are thrilled to have you with us! Your unique promotional code for this month is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{PromoCode}}</span></span>.</p>
    <p>Your current subscription plan is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{SubscriptionPlan}}</span></span>.</p>
    <p>Your customer ID is: <span contenteditable=""false"" class=""e-mention-chip""><span>{{CustomerID}}</span></span>.</p>
    <p>Your promotional code expires on: <span contenteditable=""false"" class=""e-mention-chip""><span>{{ExpirationDate}}</span></span>.</p>
    <p>Feel free to browse our latest offerings and updates. If you need any assistance, don't hesitate to contact us at <a href=""mailto:{{SupportEmail}}""><span contenteditable=""false"" class=""e-mention-chip""><span>{{SupportEmail}}</span></span></a> or call us at <span contenteditable=""false"" class=""e-mention-chip""><span>{{SupportPhoneNumber}}</span></span>.</p>
    <p>Best regards,<br>The <span contenteditable=""false"" class=""e-mention-chip""><span>{{CompanyName}}</span></span> Team</p>";
    private char _mentionChar = '{';
    public class MergeData
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }
    private List<MergeData> _mergeData = new List<MergeData>
    {
        new MergeData { Text = "First Name", Value = "FirstName" },
        new MergeData { Text = "Last Name", Value = "LastName" },
        new MergeData { Text = "Support Email", Value = "SupportEmail" },
        new MergeData { Text = "Company Name", Value = "CompanyName" },
        new MergeData { Text = "Promo Code", Value = "PromoCode" },
        new MergeData { Text = "Support Phone Number", Value = "SupportPhoneNumber" },
        new MergeData { Text = "Customer ID", Value = "CustomerID" },
        new MergeData { Text = "Expiration Date", Value = "ExpirationDate" },
        new MergeData { Text = "Subscription Plan", Value = "SubscriptionPlan" }
    };
    private List<ToolbarItemModel> _tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Name = "MergeData", TooltipText = "Merge Data" },
        new ToolbarItemModel() { Name = "InsertField", TooltipText = "Insert Field" },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo },
    };
    private List<DropDownMenuItem> _items = new List<DropDownMenuItem>
    {
        new DropDownMenuItem { Text = "First Name" },
        new DropDownMenuItem { Text = "Last Name" },
        new DropDownMenuItem { Text = "Support Email" },
        new DropDownMenuItem { Text = "Company Name" },
        new DropDownMenuItem { Text = "Promo Code" },
        new DropDownMenuItem { Text = "Support Phone Number" },
        new DropDownMenuItem { Text = "Customer ID" },
        new DropDownMenuItem { Text = "Expiration Date" },
        new DropDownMenuItem { Text = "Subscription Plan" }
    };
    private Dictionary<string, string> _placeholderData = new Dictionary<string, string>
    {
        { "FirstName", "John" },
        { "LastName", "Doe" },
        { "PromoCode", "ABC123" },
        { "SubscriptionPlan", "Premium" },
        { "CustomerID", "123456" },
        { "ExpirationDate", "2024-12-31" },
        { "SupportEmail", "support@example.com" },
        { "SupportPhoneNumber", "+1-800-555-5555" },
        { "CompanyName", "Example Inc." }
    };
    public void OnClickHandler()
    {
        if (this._mailMergeEditor != null)
        {
            var editorContent = this._mailMergeEditor.Value;
            var mergedContent = ReplacePlaceholders(editorContent, this._placeholderData);
            _rteValue = mergedContent;
        }
    }
    public void OnItemSelect(MenuEventArgs args)
    {
        if (args.Item.Text != null)
        {
            var value = _mergeData.FirstOrDefault(md => md.Text == args.Item.Text)?.Value;
            string htmlContent = $"<span contenteditable=\"false\" class=\"e-mention-chip\"><span>{{{{{value}}}}}</span></span> ";
            var undoOption = new ExecuteCommandOption { Undo = true };
            this._mailMergeEditor.ExecuteCommandAsync(CommandName.InsertHTML, htmlContent, undoOption);
        }
    }
    private void OnActionCompleteHandler(Syncfusion.Blazor.RichTextEditor.ActionCompleteEventArgs args)
    {
        if (args.RequestType == "SourceCode")
        {
            this._buttonClass = "e-tbar-btn e-tbar-btn-text e-overlay";
        }
        if (args.RequestType == "Preview")
        {
            this._buttonClass = "e-tbar-btn e-tbar-btn-text";
        }
    }
    public static string ReplacePlaceholders(string template, Dictionary<string, string> data)
    {
        return Regex.Replace(template, @"{{\s*(\w+)\s*}}", match =>
        {
            string key = match.Groups[1].Value.Trim();
            return data.TryGetValue(key, out var value) ? value : match.Value;
        });
    }
}